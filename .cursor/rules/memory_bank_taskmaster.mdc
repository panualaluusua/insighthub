---
description: 
globs: 
alwaysApply: true
---
---
description: Integration workflow between Memory Bank and Taskmaster for comprehensive development tracking
globs: .memory_bank/*.md, .taskmaster/tasks/tasks.json, .cursor/context/*.md
alwaysApply: true
---

# Memory Bank + Taskmaster Integration Workflow

**This rule defines how to combine Memory Bank (for context/learning) and Taskmaster (for task execution) for robust project tracking.**

## Core Integration Strategy
- **Memory Bank:** Handles context, learning, and planning.
- **Taskmaster:** Manages tasks and execution.
- **Hybrid workflow:** Use direct Taskmaster for simple tasks, VAN/Creative for complex ones, and @reflect for learning moments.

### DO / DON'T Examples
```markdown
# ✅ DO: Use @reflect after major decisions or unexpected challenges
# ❌ DON'T: Use @reflect for every trivial task (avoid over-documentation)
# ✅ DO: Use VAN/Creative for complex, architectural, or design-heavy tasks
# ❌ DON'T: Force VAN/Creative for simple, routine work
```

## Hybrid Workflow Approach

### **Simple Tasks:**
- Direct Taskmaster → Implementation

### **Complex Tasks:**
- VAN → Creative → Taskmaster → Implementation

### **Learning Moments:**
- Use @reflect to capture insights after significant events

## Custom Modes Usage Guide

### **@van** - Project Planning & Scoping
**When to use:** Beginning of complex features, new work, or architectural decisions.

**Workflow:**
1. Use `@van` to scope feature/problem
2. Save resulting "Narrative" as memory file
3. Use memory to create Taskmaster tasks
4. Reference memory during implementation

**Example:** `@van "Build content ranking algorithm"` → Creates `ranking_algorithm_plan.md` → Generate Taskmaster tasks → Reference during development

### **@creative** - Design Exploration
**When to use:** Complex architectural, algorithmic, or UI/UX decisions requiring multiple design options.

**Workflow:**
1. Use `@creative` to explore multiple approaches
2. Analyze pros/cons of each option
3. Select and justify recommended approach
4. Document implementation guidelines
5. Save creative analysis as memory file

**Example:** `@creative "Design scrollable content feed"` → Explores multiple UI patterns → Selects infinite scroll → Documents implementation guidelines

### **@reflect** - Learning & Process Improvement  
**When to use:** After completing tasks, encountering problems, or capturing learnings.

**Workflow:**
1. Complete a Taskmaster task
2. Use `@reflect` to analyze experience
3. Save reflection as memory file
4. Apply insights to improve future tasks

**Example:** Complete Task 15 → `@reflect` → Creates `n8n_setup_learnings.md` → Use insights for Task 16

### **@bank** - Context Retrieval
**When to use:** Need to recall previous decisions, learnings, or plans during current work.

**Workflow:**
1. Working on Taskmaster task
2. Need previous context/decisions
3. Use `@bank` to recall relevant memory
4. Apply context to current task

**Example:** Working on Task 20 → `@bank "reddit integration approach"` → Apply previous learnings

## Complete Development Cycle

### **For Simple Tasks:**
1. **Start Task:** Review in Taskmaster
2. **Implement:** Direct implementation
3. **Reflect:** @reflect if learnings emerge
4. **Update:** Mark task complete
5. **Repeat**

### **For Complex Tasks:**
1. **Scope:** @van → Plan memory → Create Taskmaster tasks
2. **Design:** @creative → Design memory → Implementation guidelines
3. **Work on Tasks:** Use @bank to recall relevant context  
4. **Complete Tasks:** @reflect → Learning memory → Update future tasks
5. **Repeat**

## Vision → VAN → Creative → PRD Workflow

### Phase 1: Collaborative Vision Creation
- **Collaboration with LLM** to develop the big picture in `VISION.md`
- Focus on the "why" and "what" at a high level
- Capture the core problem, solution approach, and value proposition

### Phase 2: VAN Analysis & Deep Dive
- **Use @van mode** to analyze the vision against:
  - Current project state (from our existing memory)
  - Technical feasibility
  - Market/competitive landscape
  - Resource requirements
- This creates a bridge between vision and implementation

### Phase 3: Creative Refinement
- **Use @creative mode** to:
  - Break down the vision into architectural components
  - Explore multiple design approaches for each component
  - Analyze pros/cons of different technical paths
  - Create implementation guidelines

### Phase 4: PRD Generation
- **Use @example_prd.txt** template to structure everything into a formal PRD
- Transform the creative exploration into actionable specifications
- Define clear development phases and dependencies

## Key Benefits

- **Taskmaster:** Handles "what" and "when" (task management)
- **Memory Bank:** Handles "why" and "how" (context and learning)
- **Integration:** Complete development history that survives across sessions
- **Flexibility:** Lightweight for simple tasks, structured for complex decisions

## Best Practices

- **Use simple workflow** for straightforward tasks to maintain speed
- **Use structured workflow** for complex architectural decisions
- **Always use @reflect** after completing tasks with learnings
- **Use @bank** whenever you need to recall previous work or decisions
- **Keep memory files focused** and well-named for easy retrieval
- **Reference memories** when updating or creating related tasks
- **Update memories** when implementation differs from original plans
- **Use cross-references** to maintain connections between related work

## Template for Task Completion Reflection

When using `@reflect` after completing a task, structure the reflection with:

1. **What was accomplished:** Brief summary of what was completed
2. **What was learned:** New insights, techniques, or understanding gained
3. **Challenges encountered:** Problems faced and how they were resolved
4. **Decisions made:** Technical or process decisions and their rationale
5. **Impact on future work:** How this affects upcoming tasks or the overall project
6. **Cross-references:** Related task IDs and memory files

This ensures consistent, valuable reflections that build the project's knowledge base over time.

## See also
- [taskmaster.mdc](mdc:taskmaster.mdc)
- [python_development.mdc](mdc:python_development.mdc)

---

## Maintenance Notes
- **Update this rule as the integration workflow evolves.**
- **Add new DO/DON'T examples as new patterns emerge.**
- **Cross-reference new or updated rules as needed.**






