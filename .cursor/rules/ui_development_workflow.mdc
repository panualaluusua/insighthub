---
description: 
globs: 
alwaysApply: false
---
# UI Development Workflow (UI Rule)

**This rule defines the comprehensive UI development workflow for the InsightHub frontend application, serving as the central hub for all UI development practices.**

## Key Principles
- **Component-driven development:** Build UI components in isolation before integration
- **Design system first:** Use established design tokens and patterns consistently
- **Accessibility by default:** Ensure WCAG 2.1 AA compliance from the start
- **Test-driven development:** Write tests alongside component development
- **Performance conscious:** Consider performance implications in every decision
- **TypeScript-first:** All components must use proper TypeScript interfaces

### DO / DON'T Examples
```svelte
<!-- ✅ DO: Follow complete UI development workflow -->
<script lang="ts">
  // 1. Import proper types
  import type { ButtonProps } from '../types/index.js';
  
  // 2. Define props with TypeScript
  export let variant: ButtonProps['variant'] = 'primary';
  export let disabled: boolean = false;
  
  // 3. Include accessibility and testing props
  let className: string = '';
  export { className as class };
  export let testId: string | undefined = undefined;
  
  // 4. Use design system tokens
  $: variantClasses = {
    primary: 'bg-primary-600 hover:bg-primary-700 text-white',
    secondary: 'bg-secondary-200 hover:bg-secondary-300 text-secondary-900'
  }[variant];
</script>

<!-- 5. Implement semantic HTML with ARIA -->
<button
  type="button"
  class="{variantClasses} px-4 py-2 rounded-lg font-medium transition-colors {className}"
  {disabled}
  data-testid={testId}
  aria-disabled={disabled}
  on:click
  on:focus
  on:blur
>
  <slot />
</button>

<!-- ❌ DON'T: Skip workflow steps -->
<script>
  export let variant = 'primary'; // No TypeScript
</script>

<div class="button bg-blue-500 p-2"> <!-- No semantic HTML, hardcoded styles -->
  <slot />
</div>
```

## Complete Development Workflow

### Phase 1: Component Planning
```markdown
## Component Planning Checklist

### Requirements Analysis
- [ ] Review design specifications and mockups
- [ ] Identify component variants and states
- [ ] Define responsive behavior requirements
- [ ] Document accessibility requirements
- [ ] Plan for error states and edge cases

### API Design
- [ ] Define component props interface
- [ ] Plan event handlers and callbacks
- [ ] Design slot architecture
- [ ] Consider component composition
- [ ] Plan for extensibility

### Technical Planning
- [ ] Identify design system tokens needed
- [ ] Plan TypeScript interfaces
- [ ] Consider performance implications
- [ ] Plan testing strategy
- [ ] Identify dependencies
```

### Phase 2: Implementation
```typescript
// Step 1: Define TypeScript interfaces
// src/lib/types/index.ts
export interface ComponentProps extends BaseComponentProps {
  /** Component visual variant */
  variant?: 'primary' | 'secondary' | 'outline';
  
  /** Component size */
  size?: 'sm' | 'md' | 'lg';
  
  /** Disabled state */
  disabled?: boolean;
  
  /** Loading state */
  loading?: boolean;
  
  /** Click event handler */
  onClick?: () => void;
}

// Step 2: Implement component following all standards
// [See svelte_component_ui.mdc for complete implementation patterns]

// Step 3: Export component
// src/lib/index.ts
export { default as Component } from './components/Component.svelte';
```

### Phase 3: Testing Implementation
```typescript
// Step 1: Unit tests with full coverage
// src/lib/components/Component.test.ts
import { describe, it, expect, vi } from 'vitest';
import { render, screen, fireEvent } from '@testing-library/svelte';
import Component from './Component.svelte';

describe('Component', () => {
  // Test rendering with default props
  // Test all prop variations
  // Test user interactions
  // Test accessibility compliance
  // Test error states
});

// Step 2: E2E tests (if component requires integration testing)
// tests/component-integration.spec.ts
// [See testing_ui.mdc for complete testing patterns]
```

### Phase 4: Quality Assurance
```markdown
## Quality Gates Checklist

### Code Quality
- [ ] TypeScript interfaces properly defined
- [ ] Component follows established patterns
- [ ] Error handling implemented
- [ ] Performance optimized
- [ ] Bundle size impact assessed

### Design System Compliance
- [ ] Uses design system tokens exclusively
- [ ] Follows component patterns
- [ ] Responsive design implemented
- [ ] Animation/transitions appropriate
- [ ] Dark mode support (if applicable)

### Accessibility Compliance
- [ ] Semantic HTML structure
- [ ] ARIA attributes correct
- [ ] Keyboard navigation functional
- [ ] Screen reader compatibility
- [ ] Color contrast verified (WCAG AA)
- [ ] Focus management implemented

### Testing Coverage
- [ ] Unit tests written (80%+ coverage)
- [ ] Accessibility tests pass
- [ ] Cross-browser compatibility verified
- [ ] Performance benchmarks met
- [ ] E2E tests (if required)

### Documentation
- [ ] JSDoc comments added
- [ ] Usage examples created
- [ ] Props and events documented
- [ ] Accessibility features noted
- [ ] Migration guide (if breaking changes)
```

## File Organization Standards

### Component Structure
```
src/lib/components/
├── base/                    # Foundation components
│   ├── Button.svelte
│   ├── Button.test.ts
│   ├── Input.svelte
│   ├── Input.test.ts
│   └── Card.svelte
├── auth/                    # Feature-specific components
│   ├── LoginForm.svelte
│   ├── LoginForm.test.ts
│   └── SignUpForm.svelte
├── content/                 # Domain-specific components
│   ├── ContentCard.svelte
│   ├── ContentFeed.svelte
│   └── ContentFilters.svelte
├── layout/                  # Layout and navigation
│   ├── MainNavigation.svelte
│   ├── PageLayout.svelte
│   └── Sidebar.svelte
└── forms/                   # Form-specific components
    ├── FormField.svelte
    └── FormValidation.svelte

src/lib/types/
└── index.ts                 # All TypeScript interfaces

tests/
├── unit/                    # Component unit tests
├── e2e/                     # End-to-end tests
└── accessibility/           # Accessibility-specific tests
```

## Rule Integration Hub

This workflow integrates with and references the following specialized UI rules:

### Core UI Development Rules
- **[svelte_component_ui.mdc](mdc:svelte_component_ui.mdc)** - SvelteKit component development standards
- **[tailwind_design_ui.mdc](mdc:tailwind_design_ui.mdc)** - TailwindCSS design system standards
- **[testing_ui.mdc](mdc:testing_ui.mdc)** - Frontend testing standards
- **[accessibility_ui.mdc](mdc:accessibility_ui.mdc)** - Accessibility compliance standards
- **[performance_ui.mdc](mdc:performance_ui.mdc)** - Frontend performance optimization

### Integration with General Rules
- **[dev_workflow.mdc](mdc:dev_workflow.mdc)** - General development workflow
- **[taskmaster.mdc](mdc:taskmaster.mdc)** - Task management integration
- **[tdd_testing.mdc](mdc:tdd_testing.mdc)** - Test-driven development principles

## Troubleshooting Common Issues

### TypeScript Issues
```markdown
**Problem**: Component props not properly typed
**Solution**: Define interfaces in types/index.ts and import correctly

**Problem**: Event handlers causing type errors
**Solution**: Use proper function signatures with optional parameters
```

### Styling Issues
```markdown
**Problem**: TailwindCSS classes not applying
**Solution**: Check class names, verify config, restart dev server

**Problem**: Responsive design not working
**Solution**: Verify mobile-first approach, check breakpoint usage
```

### Accessibility Issues
```markdown
**Problem**: axe-core test failures
**Solution**: Review ARIA attributes, semantic HTML, keyboard navigation

**Problem**: Screen reader compatibility issues
**Solution**: Test with actual screen readers, verify announcements
```

### Performance Issues
```markdown
**Problem**: Component causing layout shifts
**Solution**: Reserve space for dynamic content, use aspect ratios

**Problem**: Large bundle sizes
**Solution**: Implement code splitting, tree shaking, dynamic imports
```

---

## See also
- [svelte_component_ui.mdc](mdc:svelte_component_ui.mdc)
- [tailwind_design_ui.mdc](mdc:tailwind_design_ui.mdc)
- [testing_ui.mdc](mdc:testing_ui.mdc)
- [accessibility_ui.mdc](mdc:accessibility_ui.mdc)
- [performance_ui.mdc](mdc:performance_ui.mdc)
- [dev_workflow.mdc](mdc:dev_workflow.mdc)

---

## Maintenance Notes
- **Update workflow as new UI patterns and tools emerge**
- **Review quality gates quarterly and adjust based on project evolution**
- **Add new troubleshooting scenarios as they are encountered**
- **Keep integration references current with rule changes**

