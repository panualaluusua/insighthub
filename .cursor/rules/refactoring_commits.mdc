---
description: 
globs: 
alwaysApply: false
---
# Refactoring & Commit Standards

**This rule enforces disciplined refactoring and commit/PR standards for all Python code.**

## Key Principles
- **Refactor after green:** Always refactor after tests pass, but only if it adds value.
- **Commit before and after refactoring:** Use version control to safeguard changes.
- **Maintain external APIs:** Refactoring must not break public interfaces.
- **Refactoring checklist:**
  - All tests pass
  - Static analysis (lint, mypy) passes
  - No new public APIs unless intended
  - Code is more readable
- **Conventional commits:** Use `feat:`, `fix:`, `refactor:`, `test:` prefixes.
- **Small, focused PRs:** Each PR should address a single feature or fix and pass all checks.

### DO / DON'T Examples
```python
# ✅ DO: Refactor after all tests pass
def process_order(order):
    # ...
    return submit_order(final)

# ❌ DON'T: Refactor before tests are green
def process_order(order):
    # ...
    # Refactor here before tests pass (BAD)
    return submit_order(final)

# ✅ DO: Use clear commit messages
# feat: add payment processing logic
# refactor: extract order validation logic
```

---

## See also
- [python_development.mdc](mdc:python_development.mdc)
- [anti_patterns.mdc](mdc:anti_patterns.mdc)
- [tdd_testing.mdc](mdc:tdd_testing.mdc)

---

## Maintenance Notes
- **Update this rule as new refactoring or commit standards emerge.**
- **Add new DO/DON'T examples as needed.**
- **Cross-reference new or updated rules as needed.**





