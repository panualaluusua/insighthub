---
description: "A step-by-step guide for using a Git worktree to run a parallel AI agent (e.g., Gemini CLI for documentation) alongside primary development."
globs: []
---

# Dual-Agent Workflow with Git Worktree & Gemini CLI

This guide outlines a workflow for using two AI agents on the same codebase simultaneously.

-   **Agent 1 (Primary):** Cursor AI in the main project window for feature development.
-   **Agent 2 (Secondary):** Gemini CLI in a separate terminal for documentation.

The core principle is to use a `git worktree` to create a second, linked working directory. This avoids branch conflicts and the need to `git stash` when switching tasks.

### Best Practices

1.  **Organized Directory Structure:** Create all worktrees in a single parent directory for clarity (e.g., `../<project-name>-worktrees/`).
2.  **Clear Naming:** Name worktree directories after the branch they contain (e.g., `docs-main`).
3.  **Branch Hygiene:** Always create a new branch for new work. Don't create a worktree directly from `main` or `develop` for active development.
4.  **Regular Cleanup:** Once a task is complete and merged, remove the worktree using `git worktree remove <path>` and then run `git worktree prune` to clean up metadata.
5.  **.gitignore Awareness:** Files listed in `.gitignore` (like `.env` or `node_modules`) are not created automatically in a new worktree. You may need to create them manually.

### Step-by-Step Workflow

#### 1. Setup: Create the Work Environment

First, create a new branch for the feature you're implementing with your primary agent.

```bash
# In your main project directory
git switch main
git pull
git switch -b feat/new-login-flow
Now, create a dedicated worktree for the documentation agent. This worktree will check out the feat/new-login-flow branch into a new, separate directory.

Bash

# Create a dedicated folder for all worktrees (Best Practice)
mkdir -p ../my-project-worktrees

# Create the worktree linked to your feature branch
git worktree add ../my-project-worktrees/docs-feat-new-login feat/new-login-flow
Your directory structure will now look something like this:

.
├── my-project/            <-- Your primary work directory (Agent 1: Cursor)
└── my-project-worktrees/
    └── docs-feat-new-login/ <-- Your secondary worktree (Agent 2: Gemini CLI)
2. Execution: Run Both Agents in Parallel
Agent 1 (Cursor):

Work as usual in your main my-project directory.

Create and modify files for the new feature (e.g., src/components/LoginForm.tsx).

Commit your changes to the feat/new-login-flow branch as you work.

Agent 2 (Gemini CLI):

Open a new terminal window.

Navigate to the worktree directory: cd ../my-project-worktrees/docs-feat-new-login

Commit any changes made by Agent 1 to make them visible in this worktree: git pull

Use the Gemini CLI to perform documentation tasks.

3. Example: Using Gemini CLI for Documentation
Let's say Agent 1 just created src/components/LoginForm.tsx. You now want Agent 2 (Gemini) to document it.

In the terminal located at your worktree (../my-project-worktrees/docs-feat-new-login), run the Gemini CLI and give it a prompt referencing the new file.

Bash

# Launch the Gemini CLI in the worktree directory
gemini
Once the Gemini CLI is running, you can pass it the file and a prompt. The @ symbol tells Gemini to add the file to its context.

> Create comprehensive JSDoc documentation for the React component in @src/components/LoginForm.tsx. Explain the purpose of the component, its props, and the state it manages.
Gemini will then generate the documentation and you can ask it to write the changes directly to the file.

4. Integration: Merge the Work
Once both agents have completed their tasks, you will have commits in the same branch (feat/new-login-flow) coming from two different directories. Since Git history is shared, you just need to push the branch and create a pull request.

In either directory, make sure all changes are committed.

Pull any final changes: git pull

Push the branch to remote: git push --set-upstream origin feat/new-login-flow

Create your pull request as usual.

Finally, clean up the worktree: git worktree remove ../my-project-worktrees/docs-feat-new-login