---
description: 
globs: 
alwaysApply: false
---
# Immutability & Functional Programming

**This rule enforces immutability and functional programming as required disciplines for all Python code.**

## Key Principles
- **Immutability:** Prefer immutable data structures (`dataclasses(frozen=True)`, `NamedTuple`, or avoid mutation).
- **Pure functions:** Write functions with no side effects. Input → Output, no mutation of arguments or global state.
- **Composition:** Build complex logic by composing small, pure functions.
- **Early returns & guard clauses:** Avoid deep nesting by returning early when possible.
- **Use comprehensions, map, filter, reduce:** Prefer these over imperative loops for transformations.

### DO / DON'T Examples
```python
# ✅ DO: Use frozen dataclasses for immutability
from dataclasses import dataclass
@dataclass(frozen=True)
class Item:
    name: str
    value: int

# ❌ DON'T: Mutate object attributes
item = Item('foo', 1)
item.value = 2  # Raises error if frozen, but avoid mutation in general

# ✅ DO: Use pure functions
def add(x, y):
    return x + y

# ❌ DON'T: Use functions with side effects
def add_and_print(x, y):
    print(x + y)
    return x + y
```

---

## See also
- [dev_workflow.mdc](mdc:general/dev_workflow.mdc)
- [tdd_testing.mdc](mdc:python/tdd_testing.mdc)
- [type_schema_style.mdc](mdc:general/type_schema_style.mdc)
- [anti_patterns.mdc](mdc:general/anti_patterns.mdc)

---

## Maintenance Notes
- **Update this rule as new functional or immutability patterns are adopted.**
- **Add new DO/DON'T examples as anti-patterns are discovered.**
- **Cross-reference new or updated rules as needed.**






