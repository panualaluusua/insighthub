---
description: Guide for using Taskmaster to manage task-driven development workflows
globs: **/*
alwaysApply: true
---
---
description: Multi-agent development workflow using Git worktrees and Taskmaster for isolated feature development
globs: **/*
alwaysApply: true



---

# Multi-Agent Git Worktree Development Workflow

**This rule defines the standard process for multi-agent development using Git worktrees and Taskmaster.**

## Key Principles
- **Always use Git worktrees for feature development - main repository stays on master branch**
- **Work directly in master tag context - avoid complex tag operations that risk data loss**
- **Create worktree first, then identify and work on specific tasks/subtasks**
- **Keep task management simple and safe**

### DO / DON'T Examples
```bash
# ‚úÖ DO: Create worktree first, then work on specific task in master context
git worktree add -b feat/new-login worktrees/login-feature master
cd worktrees/login-feature
task-master show 35.8  # Work directly on the task

# ‚ùå DON'T: Use complex tag moving operations that risk data loss
# ‚ùå DON'T: Create new tags or copy tags for simple feature work

# ‚úÖ DO: Work directly on subtasks in master tag
task-master set-status --id=35.8 --status=in-progress
task-master update-subtask --id=35.8 --prompt="Starting implementation..."

# ‚ùå DON'T: Move tasks between tags unless absolutely necessary
```




--[-](mdc:general/self_improve.mdc)

##[ See also](mdc:general/type_schema_style.mdc)
- [taskmaster.mdc](mdc:general/anti_patterns.mdc)
- [self_improve.mdc](mdc:general/immutability_functional.mdc)
- [tdd_testing.mdc](mdc:python/python_development.mdc)
- @type_schema_style.mdc
- @anti_patterns.mdc
- @immutability_functional.mdc
- @python_development.mdc


---

## Standard Operating Procedure

**Follow this simplified three-phase process for all feature development.**

### **Phase 1: Create Worktree & Identify Work**

- **Survey for Work**: From the main repository directory, list available tasks
  ```bash
  task-master list
  task-master next
  ```

- **Create Worktree & Branch**: Create an isolated environment for development
  ```bash
  git worktree add -b feat/feature-name worktrees/feature-name-worktree master
  ```

- **Initialize Development Context**: Move into the new worktree (stay in master tag)
  ```bash
  cd worktrees/feature-name-worktree
  ```

- **Identify Specific Task**: Choose the specific task/subtask to work on
  ```bash
  task-master show <task-id>  # e.g., task-master show 35.8
  ```

### **Phase 2: The Development Loop**

**‚ö†Ô∏è CRITICAL: ALL development work MUST happen inside the worktree directory! Never modify files in the main repository during Phase 2.**

**This iterative loop occurs entirely within the feature's dedicated worktree, working in master tag:**

- **Start Task**: Set the task/subtask status to in-progress
  ```bash
  task-master set-status --id=<task-id> --status=in-progress
  ```

- **Log Implementation Plan**: Use `task-master update-subtask` to document approach

- **üî¥ TDD Implementation (MANDATORY)**:
  **ALWAYS follow Test-Driven Development - tests FIRST, then implementation:**
  
  1. **Write Tests First** (Red phase):
     ```bash
     # Write failing tests for the feature you're about to implement
     # For Python: pytest test_new_feature.py
     # For JavaScript: npm test new-feature.test.js
     ```
  
  2. **Implement Minimal Code** (Green phase):
     ```bash
     # Write the minimal code to make tests pass
     # Focus on making tests green, not perfect code
     ```
  
  3. **Refactor** (Refactor phase):
     ```bash
     # Improve code quality while keeping tests green
     # Run tests after each refactor to ensure nothing breaks
     ```
  
  4. **Repeat TDD Cycle**: Continue Red-Green-Refactor for each feature increment

- **Log Progress**: Use `task-master update-subtask` to record TDD cycles, findings, and decisions

- **üìö Create Documentation**: As you complete implementation, create documentation in `docs/` folder:
  ```bash
  # For backend features: docs/backend/FEATURE_NAME.md
  # For frontend features: docs/frontend/FEATURE_NAME.md
  # For testing strategies: docs/testing/FEATURE_NAME.md
  ```

### **Phase 2.5: üö® MANDATORY Quality Audit (Cannot Skip!)**

**‚ö†Ô∏è CRITICAL: You CANNOT mark a task as complete without running Aider audits! This step is MANDATORY for all code changes.**

**Before marking a task as complete, the agent MUST perform an automated audit using the Aider-powered auditor.** This ensures all code meets our quality, security, performance, and cost standards.

- **1. Analyze the Task Context:** Review the task details and identify what type of code changes were made.
  ```bash
  # Check what files were actually modified
  git status --short
  # Or for a feature branch:
  # git diff --name-only master
  ```

- **2. AI-Powered Smart File Selection:** **The AI agent should intelligently select relevant files for auditing based on:**
  - **Task type and scope** (authentication ‚Üí security audit)
  - **File content analysis** (API endpoints ‚Üí security + performance)
  - **Technology stack** (database queries ‚Üí performance + cost)
  - **Risk assessment** (user input handling ‚Üí security)
  
  **The enhanced Aider auditor now automatically filters irrelevant rules**, but file selection is still critical:
  
  **Examples of smart selection:**
  ```bash
  # ‚úÖ GOOD: Security audit for authentication code
  ./run_aider_audit.ps1 -AuditType SECURITY -Files "src/auth.py", "src/middleware/auth.ts"
  
  # ‚úÖ GOOD: Performance audit for database operations  
  ./run_aider_audit.ps1 -AuditType PERFORMANCE -Files "src/orchestrator/storage.py", "src/database/queries.py"
  
  # ‚úÖ NOW ACCEPTABLE: Enhanced auditor will skip irrelevant rules
  ./run_aider_audit.ps1 -AuditType SECURITY -Files "README.md"
  # Will produce a report explaining why most security rules don't apply to documentation
  ```

- **3. Select Appropriate Audit Types:** Based on the AI analysis, choose audits that match the actual code:
    - **SECURITY:** Authentication, authorization, API endpoints, user input, configuration files
    - **PERFORMANCE:** Database queries, loops, API calls, caching, algorithmic complexity
    - **CODE_QUALITY:** General code structure, naming, documentation, type safety
    - **COST:** External API calls, cloud services, database operations, resource usage

- **4. Execute Targeted Audits:** Run the audit script for each selected audit type and file combination.
  ```bash
  # Example: New API endpoint requiring multiple audits
  ./run_aider_audit.ps1 -AuditType SECURITY -Files "src/routes/api/users/+server.ts"
  ./run_aider_audit.ps1 -AuditType PERFORMANCE -Files "src/routes/api/users/+server.ts"
  ```

- **5. AI-Powered Report Analysis:** The agent must:
    - **Read and understand each generated report** from `docs/reports/`
    - **Identify actionable items** from ‚ùå FAIL and ‚ö†Ô∏è WARN statuses
    - **Prioritize critical security and performance issues**
    - **Create implementation tasks** for significant findings
    - **Determine if findings block task completion** or can be addressed later

- **6. Create Fix Loop if Needed:** If critical issues are found:
    - Address ‚ùå FAIL issues immediately
    - Document ‚ö†Ô∏è WARN issues for future improvement
    - Re-run audits after fixes to verify resolution
    - Update the task with audit findings and resolution notes

- **7. Mark Complete & Document**: Once audits pass or issues are appropriately handled:
  ```bash
  task-master update-subtask --id=<task-id> --prompt="Audit completed: [SECURITY: ‚úÖ PASS] [PERFORMANCE: ‚ö†Ô∏è Minor warnings documented] - See reports in docs/reports/"
  task-master set-status --id=<task-id> --status=done
  git commit -m "feat: Complete task X with audit validation"
  ```

**AI Agent Guidelines for Audit Relevance:**
- **Before auditing:** Analyze file content to ensure audit type relevance
- **Skip irrelevant audits:** Don't run SECURITY audits on pure documentation
- **Focus on changed code:** Prioritize files that were actually modified for the task
- **Consider downstream impact:** Audit files that interact with the changed code
- **Use contextual intelligence:** A new database migration might need PERFORMANCE + COST audits

### **Phase 3: Integrate & Finalize**

- **Return to Main Repository**: Navigate back to the main directory
- **Merge Feature**: Integrate the completed feature branch. When creating the Pull Request, **link to the generated audit reports** in the PR description for human review.
  ```bash
  git checkout master
  git merge feat/feature-name
  ```

- **Cleanup Git**: Remove the feature's worktree and branch
  ```bash
  git worktree remove worktrees/feature-name-worktree
  git branch -d feat/feature-name
  ```

- **Verify Task Status**: Ensure completed tasks are marked as done in master tag
  ```bash
  task-master list --status=done
  ```[](mdc:docs/frontend/PERFORMANCE_VISUAL_TESTING.md)

- **Link Documentation to Task**: After creating or upd@ating documentation, add a reference (file path or markdown link) to the relevant documentation in the Taskmaster task's `details`, `comments`, or a dedicated `docs` field. This ensures future readers can easily find the implementation details.
  ```bash
  # Example: Update the task with a documentation link
  task-master update-task --id=<task-id> --prompt="See @PERFORMANCE_VISUAL_TESTING.md for full implementation details."
  ```




---

## **Taskmaster Integration Guidelines**

### **Primary Interaction Methods**

- **MCP Server (Recommended for AI Agents)**: Use MCP tools for better performance and structured data exchange
  - Refer to @mcp.mdc for MCP architecture details
  - See @taskmaster.mdc for comprehensive tool reference
  - Restart MCP server if core logic changes

- **CLI (For Users & Fallback)**: Use `task-master` command for direct terminal interaction
  - Install globally: `npm install -g task-master-ai`
  - Use locally: `npx task-master-ai ...`

### **Safe Task Management Practices**

- **Work in Master Tag**: Avoid creating or switching tags for simple feature work
- **Use Simple Operations**: Prefer `show`, `set-status`, `update-subtask` over complex operations
- **Avoid Tag Operations**: Only use tags for major branching strategies, not routine feature work
- **Backup Before Complex Operations**: Always backup tasks.json before any bulk operations

### **Task Management Best Practices**

- **Complexity Analysis**: Use `analyze_project_complexity --research` for comprehensive analysis
- **Task Breakdown**: Use `expand_task` with complexity reports or `--num` for specific subtask count
- **Implementation Drift**: Use `update` or `update_task` when approach changes significantly
- **Status Management**: Use 'pending', 'done', 'deferred', or custom statuses
- **Dependencies**: Use `add_dependency` and `remove_dependency` to manage task relationships

### **Task Structure Fields**

- **id**: Unique identifier (e.g., `1`, `1.1`)
- **title**: Brief, descriptive title
- **description**: Concise summary of task scope
- **status**: Current state (`pending`, `done`, `deferred`)
- **dependencies**: IDs of prerequisite tasks with status indicators
- **priority**: Importance level (`high`, `medium`, `low`)
- **details**: In-depth implementation instructions
- **testStrategy**: Verification approach
- **subtasks**: List of smaller, specific tasks

### **Iterative Subtask Implementation Process**

1. **Understand Goal**: Use `task-master show <subtaskId>` for detailed requirements
2. **Plan Implementation**: Explore codebase and identify specific changes needed
3. **Log the Plan**: Use `update_subtask` with complete findings and approach
4. **Verify Planning**: Confirm plan was logged successfully
5. **Begin Implementation**: Set status to `in-progress` and start coding
6. **Log Progress**: Regularly append findings, successes, and failures
7. **Update Rules**: Create/update rules based on new patterns discovered
8. **üìö Document Architecture**: Create comprehensive documentation in `docs/` folder
9. **Mark Complete**: Set status to `done` after verification
10. **Commit Changes**: Stage and commit with comprehensive message
11. **Proceed**: Identify next subtask using `task-master next`




---

## **üìö Documentation Requirements**

### **Critical Documentation Principle**
**ALL significant architectural changes, QA processes, testing strategies, and implementation patterns MUST be documented in the `docs/` folder immediately upon completion.**

### **Documentation Standards**
- **Location**: Use `docs/` folder with appropriate subdirectories (`docs/frontend/`, `docs/backend/`, `docs/testing/`)
- **Format**: Markdown files with clear structure, examples, and cross-references
- **Timing**: Document DURING implementation, not as an afterthought
- **Content**: Include architecture diagrams, implementation details, troubleshooting guides, and team guidelines

### **Documentation Triggers**
- **New QA Infrastructure**: Document in `docs/frontend/QUALITY_ASSURANCE.md`
- **Testing Strategies**: Document in `docs/testing/`
- **API Changes**: Document in `docs/backend/`
- **Architecture Updates**: Update `docs/ARCHITECTURE.md`
- **Workflow Changes**: Update this rule and related documentation

### **DO / DON'T Examples**
```bash
# ‚úÖ DO: Create documentation immediately after implementation
task-master update-subtask --id=35.7 --prompt="QA infrastructure complete"
# Create docs/frontend/QUALITY_ASSURANCE.md with full implementation details

# ‚ùå DON'T: Mark task complete without documentation
task-master set-status --id=35.7 --status=done
# Without creating proper documentation in docs/ folder
```




---

## ü§ñ AI-Powered Testing & Research Requirements

### Hybrid Requirement Policy

- **Mandatory:** For all major features, UI/UX changes, and releases:
  - Run all AI-powered Playwright and bug detection tests (e.g., `npm run test:ai`, `npm run analyze:ai`).
  - Review and address all AI-generated issues before merging.
  - Perform AI-powered research for new technologies, libraries, or complex features.
  - Link AI test results and research findings to the relevant Taskmaster task (in `details`, `comments`, or a `docs` field).
  - Do not mark the task as "done" until these steps are complete.

- **Recommended:** For minor bugfixes, prototypes, or WIP branches:
  - AI-powered steps are encouraged but not strictly required.

### Example Checklist (add to PRs or Taskmaster tasks)

- [ ] AI-powered Playwright/bug detection tests run and passed
- [ ] AI research performed for new tech/complex features
- [ ] AI test results/research linked to Taskmaster task

### Example Workflow Step

```bash[](mdc:path/to/report)
# Run AI-powered tests
npm run test:ai
npm run analyze:ai

# Link results to Taskmaster
# task-master update-task --id=<task-id> --prompt="See @AI test report for details."
```




---

## **‚ö†Ô∏è CRITICAL: Avoid Data Loss**

### **Tag System Safety**
- **NEVER use `copy_tag` or complex tag operations for routine feature work**
- **NEVER create new tags unless working on major architectural changes**
- **NEVER move tasks between tags unless absolutely necessary**
- **ALWAYS work in master tag context for normal feature development**

### **Safe Operations Only**
```bash
# ‚úÖ SAFE: Work directly on tasks in master context
task-master show 35.8
task-master set-status --id=35.8 --status=in-progress
task-master update-subtask --id=35.8 --prompt="Progress update"

# ‚ùå DANGEROUS: Tag operations that risk data loss
# task-master add-tag feat-something
# task-master copy-tag master feat-something
# task-master move --from=master.5 --to=feat-something.1
```




---

## Maintenance Notes
- **Review and update this workflow after major releases, process changes, or when new patterns emerge**
- **Cross-reference new or updated rules as needed**
- **Encourage all contributors to suggest workflow improvements**
- **Update task management practices as Taskmaster features evolve**
- **üìö Maintain documentation in `docs/` folder for all workflow changes**



- **‚ö†Ô∏è ALWAYS prioritize data safety over complex workflows**