---
description: 
globs: 
alwaysApply: false
---
# UI Development Workflow (UI Rule)

**This rule defines the comprehensive UI development workflow for the InsightHub frontend application, serving as the central hub for all UI development practices.**

## Key Principles
- **Component-driven development:** Build UI components in isolation before integration
- **Design system first:** Use established design tokens and patterns consistently
- **Accessibility by default:** Ensure WCAG 2.1 AA compliance from the start
- **Test-driven development:** Write tests alongside component development
- **Performance conscious:** Consider performance implications in every decision
- **TypeScript-first:** All components must use proper TypeScript interfaces

### DO / DON'T Examples
```svelte
<!-- ✅ DO: Follow complete UI development workflow -->
<script lang="ts">
  // 1. Import proper types
  import type { ButtonProps } from '../types/index.js';
  
  // 2. Define props with TypeScript
  export let variant: ButtonProps['variant'] = 'primary';
  export let disabled: boolean = false;
  
  // 3. Include accessibility and testing props
  let className: string = '';
  export { className as class };
  export let testId: string | undefined = undefined;
  
  // 4. Use design system tokens
  $: variantClasses = {
    primary: 'bg-primary-600 hover:bg-primary-700 text-white',
    secondary: 'bg-secondary-200 hover:bg-secondary-300 text-secondary-900'
  }[variant];
</script>

<!-- 5. Implement semantic HTML with ARIA -->
<button
  type="button"
  class="{variantClasses} px-4 py-2 rounded-lg font-medium transition-colors {className}"
  {disabled}
  data-testid={testId}
  aria-disabled={disabled}
  on:click
  on:focus
  on:blur
>
  <slot />
</button>

<!-- ❌ DON'T: Skip workflow steps -->
<script>
  export let variant = 'primary'; // No TypeScript
</script>

<div class="button bg-blue-500 p-2"> <!-- No semantic HTML, hardcoded styles -->
  <slot />
</div>
```

## Complete Development Workflow

### Phase 1: Component Planning
```markdown
## Component Planning Checklist

### Requirements Analysis
- [ ] Review design specifications and mockups
- [ ] Identify component variants and states
- [ ] Define responsive behavior requirements
- [ ] Document accessibility requirements
- [ ] Plan for error states and edge cases

### API Design
- [ ] Define component props interface
- [ ] Plan event handlers and callbacks
- [ ] Design slot architecture
- [ ] Consider component composition
- [ ] Plan for extensibility

### Technical Planning
- [ ] Identify design system tokens needed
- [ ] Plan TypeScript interfaces
- [ ] Consider performance implications
- [ ] Plan testing strategy
- [ ] Identify dependencies
```

### Phase 2: Implementation
```typescript
// Step 1: Define TypeScript interfaces
// src/lib/types/index.ts
export interface ComponentProps extends BaseComponentProps {
  /** Component visual variant */
  variant?: 'primary' | 'secondary' | 'outline';
  
  /** Component size */
  size?: 'sm' | 'md' | 'lg';
  
  /** Disabled state */
  disabled?: boolean;
  
  /** Loading state */
  loading?: boolean;
  
  /** Click event handler */
  onClick?: () => void;
}

// Step 2: Implement component following all standards
// [See svelte_component_ui.mdc for complete implementation patterns]

// Step 3: Export component
// src/lib/index.ts
export { default as Component } from './components/Component.svelte';
```

### Phase 3: Testing Implementation
```typescript
// Step 1: Unit tests with full coverage
// src/lib/components/Component.test.ts
import { describe, it, expect, vi } from 'vitest';
import { render, screen, fireEvent } from '@testing-library/svelte';
import Component from './Component.svelte';

describe('Component', () => {
  // Test rendering with default props
  // Test all prop variations
  // Test user interactions
  // Test accessibility compliance
  // Test error states
});

// Step 2: E2E tests (if component requires integration testing)
// tests/component-integration.spec.ts
// [See testing_ui.mdc for complete testing patterns]

// Step 3: AI-Powered Testing with Enhanced Playwright MCP
// tests/ai-powered-component.spec.ts
import { test, expect } from '@playwright/test';
import { AxeBuilder } from '@axe-core/playwright';

test.describe('AI-Powered Component Analysis', () => {
  test('AI visual analysis of component states', async ({ page }) => {
    await page.goto('/component-playground');
    
    // AI-powered screenshot analysis for all component variants
    const variants = ['primary', 'secondary', 'outline'];
    
    for (const variant of variants) {
      await page.selectOption('[data-testid="variant-selector"]', variant);
      
      // Capture visual evidence for AI analysis
      await page.screenshot({ 
        path: `test-results/ai-analysis/component-${variant}.png`,
        fullPage: true 
      });
      
      // AI accessibility validation
      const accessibilityResults = await new AxeBuilder({ page })
        .withTags(['wcag2a', 'wcag2aa', 'wcag21aa'])
        .analyze();
      
      expect(accessibilityResults.violations).toEqual([]);
    }
  });
  
  test('AI responsive design validation', async ({ page }) => {
    const viewports = [
      { width: 375, height: 667, name: 'mobile' },
      { width: 768, height: 1024, name: 'tablet' },
      { width: 1920, height: 1080, name: 'desktop' }
    ];
    
    for (const viewport of viewports) {
      await page.setViewportSize(viewport);
      await page.goto('/component-playground');
      
      // AI analyzes responsive behavior
      await page.screenshot({ 
        path: `test-results/ai-analysis/component-responsive-${viewport.name}.png` 
      });
      
      // Validate component remains functional across breakpoints
      const component = page.locator('[data-testid="component"]');
      await expect(component).toBeVisible();
    }
  });
});
```

### Phase 4: Optional Automated Quality Audit (Agent Workflow)

**For complex or critical UI components, the agent SHOULD consider performing an automated audit using the Aider-powered auditor.** This step is not mandatory for every component but is highly recommended in the following scenarios to ensure the highest standards:

-   **When to consider an audit:**
    -   The component is complex and handles significant state logic.
    -   The component accepts and processes user input (high risk for XSS).
    -   The component is a core, reusable part of the application's design system.
    -   The changes involve significant refactoring of an existing critical component.
    -   The component has known performance or accessibility concerns that need verification.

**If an audit is performed, the agent should follow this process:**

- **1. Identify Changed Files:** Determine which UI-related files have been modified.
  ```bash
  # Example: Find changed Svelte components and their types
  git status --short | grep -E '\.(svelte|ts)$'
  ```

- **2. Decide Which Audits to Run:** For UI components, the following audits are typically useful:
    - **New or modified component?** -> `CODE_QUALITY`, `PERFORMANCE`
    - **Component handling user input?** -> `SECURITY`

- **3. Execute the Audit Script:** Run the `run_aider_audit.sh` script for each required audit.
  ```bash
  # Example: Auditing a new Svelte component
  ./run_aider_audit.sh CODE_QUALITY src/lib/components/NewButton.svelte
  ```

- **4. Review and Act on the Report:** The agent must analyze the generated report and address any `❌ FAIL` or `⚠️ WARN` statuses before completing the task.

- **5. Mark Complete & Commit**:
  ```bash
  task-master set-status --id=<task-id> --status=done
  # Add a note if an audit was performed
  git commit -m "feat(ui): Complete component NewButton, optional audit passed."
  ```

### Phase 5: Documentation & Cross-Reference

- **Document the Component**: For every new or changed UI component, update or create documentation in `insighthub-frontend/COMPONENT_GUIDELINES.md` or a new file in `docs/frontend/`.
- **Link Documentation to Task**: Add a reference to the documentation in the relevant Taskmaster task (in `details`, `comments`, or a `docs` field).
- **Cross-Reference**: Ensure the new/updated documentation is listed in the UI Documentation Index (`docs/frontend/UI_DOCUMENTATION.md`).

## AI-Powered Testing Workflow Integration

### Enhanced Playwright MCP Commands

Use these Cursor commands throughout your development workflow:

#### @test-ai-analyze
```markdown
## Comprehensive AI Analysis
Run this command after implementing any component to get:
- AI visual pattern recognition and bug detection
- Intelligent accessibility analysis with recommendations
- Performance monitoring with AI-powered optimization suggestions
- Cross-browser compatibility assessment with AI insights
- Automated test case generation based on UI patterns

Usage: @test-ai-analyze
```

#### Manual AI Testing Commands
```bash
# Run AI-powered visual analysis tests
npm run test:ai

# Run AI tests in headed mode for debugging
npm run test:ai:headed

# Run specific AI bug detection tests
npm run test:bug-detection

# Analyze AI test results
npm run analyze:ai

# Generate comprehensive AI testing report
npx playwright show-report
```

### AI Testing Workflow Integration Points

#### 1. During Component Development
- **After implementing a new component**: Run `@test-ai-analyze` to validate design patterns
- **When adding new props/variants**: Use AI visual analysis to ensure consistency
- **Before committing**: Verify AI accessibility analysis passes

#### 2. During Feature Development
- **After UI changes**: Run AI-powered visual regression tests
- **When implementing responsive design**: Use AI viewport analysis
- **Before deployment**: Execute complete AI testing suite

#### 3. During Debugging
- **When tests fail**: Review AI-generated bug detection reports
- **For accessibility issues**: Use AI accessibility recommendations
- **For performance problems**: Follow AI performance optimization suggestions

### AI Test Results Integration

#### Bug Detection Reports
AI-generated reports are automatically saved to:
```
test-results/ai-analysis/
├── bug-detection-report.md       # Comprehensive AI analysis
├── component-visual-*.png         # Visual evidence
├── responsive-*.png               # Responsive design validation
├── accessibility-report.json      # AI accessibility findings
└── performance-analysis.md        # AI performance recommendations
```

#### Continuous Integration
```yaml
# .github/workflows/ai-testing.yml
name: AI-Powered Testing
on: [push, pull_request]

jobs:
  ai-testing:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright browsers
        run: npx playwright install
      
      - name: Run AI-powered tests
        run: npm run test:ai
      
      - name: Upload AI test results
        uses: actions/upload-artifact@v3
        with:
          name: ai-test-results
          path: test-results/ai-analysis/
```

## File Organization Standards

### Component Structure
```
src/lib/components/
├── base/                    # Foundation components
│   ├── Button.svelte
│   ├── Button.test.ts
│   ├── Input.svelte
│   ├── Input.test.ts
│   └── Card.svelte
├── auth/                    # Feature-specific components
│   ├── LoginForm.svelte
│   ├── LoginForm.test.ts
│   └── SignUpForm.svelte
├── content/                 # Domain-specific components
│   ├── ContentCard.svelte
│   ├── ContentFeed.svelte
│   └── ContentFilters.svelte
├── layout/                  # Layout and navigation
│   ├── MainNavigation.svelte
│   ├── PageLayout.svelte
│   └── Sidebar.svelte
└── forms/                   # Form-specific components
    ├── FormField.svelte
    └── FormValidation.svelte

src/lib/types/
└── index.ts                 # All TypeScript interfaces

tests/
├── unit/                    # Component unit tests
├── e2e/                     # End-to-end tests
└── accessibility/           # Accessibility-specific tests
```

## Rule Integration Hub

This workflow integrates with and references the following specialized UI rules:

### Core UI Development Rules
- **[svelte_component_ui.mdc](mdc:ui/svelte_component_ui.mdc)** - SvelteKit component development standards
- **[tailwind_design_ui.mdc](mdc:ui/tailwind_design_ui.mdc)** - TailwindCSS design system standards
- **[testing_ui.mdc](mdc:ui/testing_ui.mdc)** - Frontend testing standards
- **[accessibility_ui.mdc](mdc:ui/accessibility_ui.mdc)** - Accessibility compliance standards
- **[performance_ui.mdc](mdc:ui/performance_ui.mdc)** - Frontend performance optimization

### Integration with General Rules
- **[dev_workflow.mdc](mdc:general/dev_workflow.mdc)** - General development workflow
- **[taskmaster.mdc](mdc:tools/taskmaster.mdc)** - Task management integration
- **[tdd_testing.mdc](mdc:python/tdd_testing.mdc)** - Test-driven development principles

## Troubleshooting Common Issues

### TypeScript Issues
```markdown
**Problem**: Component props not properly typed
**Solution**: Define interfaces in types/index.ts and import correctly

**Problem**: Event handlers causing type errors
**Solution**: Use proper function signatures with optional parameters
```

### Styling Issues
```markdown
**Problem**: TailwindCSS classes not applying
**Solution**: Check class names, verify config, restart dev server

**Problem**: Responsive design not working
**Solution**: Verify mobile-first approach, check breakpoint usage
```

### Accessibility Issues
```markdown
**Problem**: axe-core test failures
**Solution**: Review ARIA attributes, semantic HTML, keyboard navigation

**Problem**: Screen reader compatibility issues
**Solution**: Test with actual screen readers, verify announcements
```

### Performance Issues
```markdown
**Problem**: component causing layout shifts
**Solution**: reserve space for dynamic content, use aspect ratios

**Problem**: large bundle sizes
**Solution**: implement code splitting, tree shaking, dynamic imports
```

---

## See also
- [svelte_component_ui.mdc](mdc:ui/svelte_component_ui.mdc)
- [tailwind_design_ui.mdc](mdc:ui/tailwind_design_ui.mdc)
- [testing_ui.mdc](mdc:ui/testing_ui.mdc)
- [accessibility_ui.mdc](mdc:ui/accessibility_ui.mdc)
- [performance_ui.mdc](mdc:ui/performance_ui.mdc)
- [dev_workflow.mdc](mdc:general/dev_workflow.mdc)

---

## Maintenance Notes
- **Update workflow as new UI patterns and tools emerge**
- **Review quality gates quarterly and adjust based on project evolution**
- **Add new troubleshooting scenarios as they are encountered**
- **Keep integration references current with rule changes**





