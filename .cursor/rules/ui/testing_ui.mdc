---
description: 
globs: 
alwaysApply: false
---
# Frontend Testing Standards (UI Rule)

**This rule defines comprehensive testing standards for the InsightHub frontend application including unit, E2E, accessibility testing, and AI-powered testing with Enhanced Playwright MCP system.**

## Key Principles
- **Test pyramid approach:** Many unit tests, fewer integration tests, minimal E2E tests
- **AI-powered analysis:** Use Enhanced Playwright MCP for intelligent bug detection and visual analysis
- **Accessibility-first:** Every component must pass accessibility tests
- **User-centric testing:** Test behavior, not implementation details
- **Coverage requirements:** 80% minimum, 100% for critical components
- **Performance testing:** Ensure components don't cause performance regressions

### DO / DON'T Examples
```typescript
// ✅ DO: Use AI-powered testing for comprehensive analysis
test('AI-powered component analysis', async ({ page }) => {
  await page.goto('/component');
  
  // Use MCP for intelligent screenshot analysis
  const screenshot = await page.screenshot({ path: 'test-results/ai-analysis/component.png' });
  
  // AI visual analysis with bug detection
  const accessibilityScanResults = await new AxeBuilder({ page })
    .withTags(['wcag2a', 'wcag2aa', 'wcag21aa'])
    .analyze();
  
  expect(accessibilityScanResults.violations).toEqual([]);
});

// ❌ DON'T: Test implementation details without AI insights
test('button sets internal state correctly', () => {
  const component = new Button({ target: document.body });
  expect(component.$$set).toBeDefined(); // Testing internals without AI analysis
});
```

## Enhanced Playwright MCP Testing System

### AI-Powered Testing Capabilities
Our Enhanced Playwright MCP system provides:
- **Vision-enabled UI analysis** with screenshot processing
- **Intelligent bug detection** using AI pattern recognition
- **Automated accessibility analysis** with actionable recommendations
- **Performance monitoring** with AI-powered optimization suggestions
- **Cross-browser compatibility** analysis with AI insights

### MCP Integration Setup
```javascript
// .cursor/mcp.json - Enhanced Playwright MCP Configuration
{
  "mcpServers": {
    "playwright": {
      "command": "npx",
      "args": ["@playwright/mcp"],
      "env": {
        "PLAYWRIGHT_BROWSERS_PATH": "0",
        "PLAYWRIGHT_BASE_URL": "http://localhost:5174"
      }
    }
  }
}
```

### AI Testing Commands
Use the following Cursor commands for AI-powered testing:

#### @test-ai-analyze
Performs comprehensive AI-powered analysis:
```markdown
@test-ai-analyze

Runs complete AI analysis including:
- Visual pattern recognition and bug detection
- Accessibility scanning with AI recommendations
- Performance analysis with optimization suggestions
- Cross-browser compatibility assessment
- Automated test case generation based on UI patterns
```

### AI-Powered Test Suite Implementation
```typescript
// ai-powered-visual.spec.ts - Complete AI Testing Suite
import { test, expect } from '@playwright/test';
import { AxeBuilder } from '@axe-core/playwright';

test.describe('AI-Powered Visual Analysis', () => {
  
  test('AI login form analysis with vision', async ({ page }) => {
    await page.goto('/signin');
    
    // AI-Powered Screenshot Analysis
    await page.screenshot({ 
      path: 'test-results/ai-analysis/signin-form.png',
      fullPage: true 
    });
    
    // Vision-enabled form structure validation
    const emailInput = page.locator('input[type="email"]');
    const passwordInput = page.locator('input[type="password"]');
    const submitButton = page.locator('button[type="submit"]');
    
    // AI validates form accessibility
    await expect(emailInput).toBeVisible();
    await expect(passwordInput).toBeVisible();
    await expect(submitButton).toBeVisible();
    
    // Accessibility analysis with AI recommendations
    const accessibilityScanResults = await new AxeBuilder({ page })
      .withTags(['wcag2a', 'wcag2aa', 'wcag21aa'])
      .analyze();
    
    expect(accessibilityScanResults.violations).toEqual([]);
  });

  test('AI responsive design analysis', async ({ page }) => {
    const viewports = [
      { width: 375, height: 667, name: 'mobile' },
      { width: 768, height: 1024, name: 'tablet' },
      { width: 1920, height: 1080, name: 'desktop' }
    ];
    
    for (const viewport of viewports) {
      await page.setViewportSize({ width: viewport.width, height: viewport.height });
      await page.goto('/');
      
      // AI-powered responsive analysis
      await page.screenshot({ 
        path: `test-results/ai-analysis/responsive-${viewport.name}.png`,
        fullPage: true 
      });
      
      // AI validates responsive behavior
      const navigation = page.locator('[data-testid="navigation"]');
      await expect(navigation).toBeVisible();
      
      if (viewport.width < 768) {
        // Mobile-specific AI validations
        const mobileMenu = page.locator('[data-testid="mobile-menu"]');
        await expect(mobileMenu).toBeVisible();
      }
    }
  });

  test('AI performance monitoring with recommendations', async ({ page }) => {
    // Start performance monitoring
    await page.goto('/');
    
    // AI measures Core Web Vitals
    const performanceMetrics = await page.evaluate(() => {
      return new Promise((resolve) => {
        new PerformanceObserver((list) => {
          const entries = list.getEntries();
          const metrics = {};
          
          entries.forEach((entry) => {
            if (entry.entryType === 'largest-contentful-paint') {
              metrics.lcp = entry.startTime;
            }
            if (entry.entryType === 'first-input') {
              metrics.fid = entry.processingStart - entry.startTime;
            }
          });
          
          resolve(metrics);
        }).observe({ entryTypes: ['largest-contentful-paint', 'first-input'] });
        
        // Fallback timeout
        setTimeout(() => resolve({}), 5000);
      });
    });
    
    // AI-powered performance analysis
    if (performanceMetrics.lcp) {
      expect(performanceMetrics.lcp).toBeLessThan(2500); // LCP should be < 2.5s
    }
    if (performanceMetrics.fid) {
      expect(performanceMetrics.fid).toBeLessThan(100); // FID should be < 100ms
    }
  });
  
  test('AI accessibility analysis with intelligent recommendations', async ({ page }) => {
    await page.goto('/');
    
    // Comprehensive accessibility scan with AI insights
    const accessibilityScanResults = await new AxeBuilder({ page })
      .withTags(['wcag2a', 'wcag2aa', 'wcag21aa'])
      .include('main')
      .analyze();
    
    // AI generates detailed violation reports
    if (accessibilityScanResults.violations.length > 0) {
      console.log('AI-Detected Accessibility Issues:', 
        accessibilityScanResults.violations.map(violation => ({
          id: violation.id,
          impact: violation.impact,
          description: violation.description,
          help: violation.help,
          helpUrl: violation.helpUrl,
          nodes: violation.nodes.length
        }))
      );
    }
    
    expect(accessibilityScanResults.violations).toEqual([]);
  });
});
```

### AI Bug Detection System
```typescript
// AI-powered bug detection patterns
test.describe('AI Bug Detection', () => {
  
  test('detects layout shifts with AI analysis', async ({ page }) => {
    await page.goto('/');
    
    let clsValue = 0;
    await page.addInitScript(() => {
      new PerformanceObserver((list) => {
        list.getEntries().forEach((entry) => {
          if (!entry.hadRecentInput) {
            clsValue += entry.value;
          }
        });
      }).observe({ entryTypes: ['layout-shift'] });
    });
    
    // Trigger content loading
    await page.click('[data-testid="load-content"]');
    await page.waitForTimeout(2000);
    
    const finalCLS = await page.evaluate(() => clsValue);
    
    // AI recommends CLS should be < 0.1
    expect(finalCLS).toBeLessThan(0.1);
  });
  
  test('AI-powered form validation analysis', async ({ page }) => {
    await page.goto('/signup');
    
    // AI tests form validation patterns
    const emailInput = page.locator('input[type="email"]');
    const submitButton = page.locator('button[type="submit"]');
    
    // Test invalid email with AI pattern recognition
    await emailInput.fill('invalid-email');
    await submitButton.click();
    
    // AI expects intelligent error messaging
    const errorMessage = page.locator('[data-testid="email-error"]');
    await expect(errorMessage).toBeVisible();
    await expect(errorMessage).toContainText(/valid email/i);
    
    // Screenshot for AI analysis
    await page.screenshot({ 
      path: 'test-results/ai-analysis/form-validation-error.png' 
    });
  });
});
```

## Testing Stack Configuration

### Unit Testing Setup (Vitest)
```javascript
// vitest.config.js
import { defineConfig } from 'vitest/config';
import { sveltekit } from '@sveltejs/kit/vite';

export default defineConfig({
  plugins: [sveltekit()],
  test: {
    globals: true,
    environment: 'jsdom',
    setupFiles: ['src/test-setup.js'],
    include: ['src/**/*.{test,spec}.{js,ts}'],
    coverage: {
      reporter: ['text', 'json', 'html'],
      exclude: [
        'node_modules/',
        'src/test-setup.js',
        '**/*.d.ts',
        '**/*.config.*'
      ],
      thresholds: {
        global: {
          branches: 80,
          functions: 80,
          lines: 80,
          statements: 80
        }
      }
    }
  }
});
```

### Enhanced Playwright Configuration
```typescript
// playwright.config.ts
import { defineConfig, devices } from '@playwright/test';

export default defineConfig({
  testDir: './tests',
  fullyParallel: true,
  forbidOnly: !!process.env.CI,
  retries: process.env.CI ? 2 : 0,
  workers: process.env.CI ? 1 : undefined,
  reporter: 'html',
  use: {
    baseURL: 'http://localhost:5174', // Updated for current dev server
    trace: 'on-first-retry',
    screenshot: 'only-on-failure',
    video: 'retain-on-failure'
  },
  projects: [
    {
      name: 'chromium',
      use: { ...devices['Desktop Chrome'] },
    },
    {
      name: 'firefox',
      use: { ...devices['Desktop Firefox'] },
    },
    {
      name: 'webkit',
      use: { ...devices['Desktop Safari'] },
    },
    {
      name: 'Mobile Chrome',
      use: { ...devices['Pixel 5'] },
    },
    {
      name: 'AI-Powered Tests',
      use: { 
        ...devices['Desktop Chrome'],
        viewport: { width: 1280, height: 720 }
      },
      testMatch: '**/ai-powered-*.spec.ts'
    }
  ],
  webServer: {
    command: 'npm run build && npm run preview',
    port: 4173,
  },
});
```

## Unit Testing Standards

### Component Testing Template
```typescript
// Component.test.ts
import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';
import { render, screen, fireEvent, cleanup } from '@testing-library/svelte';
import userEvent from '@testing-library/user-event';
import Component from './Component.svelte';

describe('Component', () => {
  beforeEach(() => {
    // Setup before each test
  });

  afterEach(() => {
    cleanup();
    vi.clearAllMocks();
  });

  describe('Rendering', () => {
    it('renders with default props', () => {
      render(Component);
      expect(screen.getByRole('button')).toBeInTheDocument();
    });

    it('renders with custom props', () => {
      render(Component, {
        props: {
          variant: 'primary',
          size: 'lg',
          disabled: true
        }
      });
      
      const button = screen.getByRole('button');
      expect(button).toHaveClass('bg-primary-600');
      expect(button).toBeDisabled();
    });
  });

  describe('User Interactions', () => {
    it('handles click events', async () => {
      const user = userEvent.setup();
      const onClick = vi.fn();
      
      render(Component, { props: { onClick } });
      
      await user.click(screen.getByRole('button'));
      expect(onClick).toHaveBeenCalledOnce();
    });

    it('handles keyboard navigation', async () => {
      const user = userEvent.setup();
      const onClick = vi.fn();
      
      render(Component, { props: { onClick } });
      
      const button = screen.getByRole('button');
      button.focus();
      
      await user.keyboard('{Enter}');
      expect(onClick).toHaveBeenCalledOnce();
      
      await user.keyboard(' ');
      expect(onClick).toHaveBeenCalledTimes(2);
    });
  });

  describe('Accessibility', () => {
    it('has proper ARIA attributes', () => {
      render(Component, {
        props: {
          disabled: true,
          'aria-label': 'Submit form'
        }
      });
      
      const button = screen.getByRole('button');
      expect(button).toHaveAttribute('aria-disabled', 'true');
      expect(button).toHaveAttribute('aria-label', 'Submit form');
    });

    it('supports screen readers', () => {
      render(Component, { props: { children: 'Click me' } });
      
      const button = screen.getByRole('button', { name: 'Click me' });
      expect(button).toBeInTheDocument();
    });
  });

  describe('Error States', () => {
    it('handles invalid props gracefully', () => {
      // Test with invalid prop values
      expect(() => {
        render(Component, {
          props: { variant: 'invalid' as any }
        });
      }).not.toThrow();
    });
  });
});
```

### Form Component Testing
```typescript
// Form component testing patterns
describe('LoginForm', () => {
  it('validates email format', async () => {
    const user = userEvent.setup();
    render(LoginForm);
    
    const emailInput = screen.getByLabelText(/email/i);
    const submitButton = screen.getByRole('button', { name: /sign in/i });
    
    await user.type(emailInput, 'invalid-email');
    await user.click(submitButton);
    
    expect(screen.getByText(/valid email/i)).toBeInTheDocument();
  });

  it('shows loading state during submission', async () => {
    const user = userEvent.setup();
    const onSubmit = vi.fn().mockImplementation(() => 
      new Promise(resolve => setTimeout(resolve, 100))
    );
    
    render(LoginForm, { props: { onSubmit } });
    
    await user.type(screen.getByLabelText(/email/i), 'test@example.com');
    await user.type(screen.getByLabelText(/password/i), 'password123');
    await user.click(screen.getByRole('button', { name: /sign in/i }));
    
    expect(screen.getByText(/signing in/i)).toBeInTheDocument();
    expect(screen.getByRole('button')).toBeDisabled();
  });
});
```

### Store Testing
```typescript
// Store testing patterns
describe('feedStore', () => {
  beforeEach(() => {
    // Reset store state
    feedStore.reset();
  });

  it('loads content correctly', async () => {
    const mockContent = [{ id: '1', title: 'Test' }];
    vi.mocked(fetch).mockResolvedValueOnce({
      ok: true,
      json: () => Promise.resolve({ data: mockContent })
    } as Response);

    await feedStore.loadContent();
    
    expect(get(feedStore.content)).toEqual(mockContent);
    expect(get(feedStore.loading)).toBe(false);
  });

  it('handles errors gracefully', async () => {
    vi.mocked(fetch).mockRejectedValueOnce(new Error('Network error'));

    await feedStore.loadContent();
    
    expect(get(feedStore.error)).toBe('Failed to load content');
    expect(get(feedStore.loading)).toBe(false);
  });
});
```

## End-to-End Testing Standards

### Page Testing Template
```typescript
// page.spec.ts
import { test, expect } from '@playwright/test';

test.describe('Feature Page', () => {
  test.beforeEach(async ({ page }) => {
    await page.goto('/feature');
  });

  test('displays page content correctly', async ({ page }) => {
    await expect(page.locator('h1')).toContainText('Feature Title');
    await expect(page.locator('[data-testid="content"]')).toBeVisible();
  });

  test('handles user interactions', async ({ page }) => {
    await page.click('[data-testid="action-button"]');
    await expect(page.locator('[data-testid="result"]')).toBeVisible();
  });

  test('works on mobile devices', async ({ page }) => {
    await page.setViewportSize({ width: 375, height: 667 });
    
    await expect(page.locator('[data-testid="mobile-menu"]')).toBeVisible();
    await page.click('[data-testid="mobile-menu-toggle"]');
    await expect(page.locator('[data-testid="navigation"]')).toBeVisible();
  });
});
```

### Authentication Flow Testing
```typescript
// auth.spec.ts
test.describe('Authentication', () => {
  test('user can sign up successfully', async ({ page }) => {
    await page.goto('/signup');
    
    await page.fill('[data-testid="email-input"]', 'test@example.com');
    await page.fill('[data-testid="password-input"]', 'SecurePass123!');
    await page.check('[data-testid="terms-checkbox"]');
    await page.click('[data-testid="signup-button"]');
    
    await expect(page.locator('[data-testid="success-message"]')).toBeVisible();
  });

  test('validates form inputs', async ({ page }) => {
    await page.goto('/signup');
    
    await page.click('[data-testid="signup-button"]');
    
    await expect(page.locator('[data-testid="email-error"]')).toContainText('Email is required');
    await expect(page.locator('[data-testid="password-error"]')).toContainText('Password is required');
  });
});
```

### Performance Testing
```typescript
// performance.spec.ts
test.describe('Performance', () => {
  test('page loads within acceptable time', async ({ page }) => {
    const startTime = Date.now();
    
    await page.goto('/');
    await page.waitForLoadState('networkidle');
    
    const loadTime = Date.now() - startTime;
    expect(loadTime).toBeLessThan(3000); // 3 seconds
  });

  test('infinite scroll performs well', async ({ page }) => {
    await page.goto('/feed');
    
    const startTime = Date.now();
    
    // Scroll to trigger loading
    await page.evaluate(() => {
      window.scrollTo(0, document.body.scrollHeight);
    });
    
    await page.waitForSelector('[data-testid="content-item"]:nth-child(20)');
    
    const scrollTime = Date.now() - startTime;
    expect(scrollTime).toBeLessThan(1000); // 1 second
  });
});
```

## Accessibility Testing Standards

### Automated Accessibility Testing
```typescript
// accessibility.spec.ts
import AxeBuilder from '@axe-core/playwright';

test.describe('Accessibility', () => {
  test('homepage is accessible', async ({ page }) => {
    await page.goto('/');
    
    const accessibilityScanResults = await new AxeBuilder({ page })
      .withTags(['wcag2a', 'wcag2aa', 'wcag21aa'])
      .analyze();
    
    expect(accessibilityScanResults.violations).toEqual([]);
  });

  test('form components are accessible', async ({ page }) => {
    await page.goto('/signup');
    
    const accessibilityScanResults = await new AxeBuilder({ page })
      .include('[data-testid="signup-form"]')
      .analyze();
    
    expect(accessibilityScanResults.violations).toEqual([]);
  });
});
```

### Keyboard Navigation Testing
```typescript
test.describe('Keyboard Navigation', () => {
  test('user can navigate with keyboard only', async ({ page }) => {
    await page.goto('/');
    
    // Tab through interactive elements
    await page.keyboard.press('Tab');
    await expect(page.locator(':focus')).toHaveAttribute('data-testid', 'skip-link');
    
    await page.keyboard.press('Tab');
    await expect(page.locator(':focus')).toHaveAttribute('data-testid', 'logo-link');
    
    await page.keyboard.press('Tab');
    await expect(page.locator(':focus')).toHaveAttribute('data-testid', 'nav-home');
  });

  test('modal traps focus correctly', async ({ page }) => {
    await page.goto('/');
    await page.click('[data-testid="open-modal"]');
    
    // Focus should be trapped within modal
    await page.keyboard.press('Tab');
    await expect(page.locator(':focus')).toHaveAttribute('data-testid', 'modal-close');
    
    await page.keyboard.press('Tab');
    await expect(page.locator(':focus')).toHaveAttribute('data-testid', 'modal-action');
    
    await page.keyboard.press('Tab');
    await expect(page.locator(':focus')).toHaveAttribute('data-testid', 'modal-close');
  });
});
```

### Screen Reader Testing
```typescript
test.describe('Screen Reader Support', () => {
  test('announcements are made correctly', async ({ page }) => {
    await page.goto('/feed');
    
    // Check for live region announcements
    await page.click('[data-testid="load-more"]');
    
    const liveRegion = page.locator('[aria-live="polite"]');
    await expect(liveRegion).toContainText('Loading more content');
    
    await page.waitForSelector('[data-testid="new-content"]');
    await expect(liveRegion).toContainText('10 new items loaded');
  });

  test('form errors are announced', async ({ page }) => {
    await page.goto('/signup');
    
    await page.click('[data-testid="signup-button"]');
    
    const errorSummary = page.locator('[role="alert"]');
    await expect(errorSummary).toBeVisible();
    await expect(errorSummary).toContainText('Please fix the following errors');
  });
});
```

## Test Data Management

### Mock Data Patterns
```typescript
// test-utils/mocks.ts
export const mockUser = {
  id: '1',
  email: 'test@example.com',
  name: 'Test User',
  avatar: 'https://example.com/avatar.jpg'
};

export const mockContent = {
  id: '1',
  title: 'Test Content',
  description: 'This is test content',
  author: mockUser,
  createdAt: '2024-01-01T00:00:00Z',
  tags: ['test', 'mock']
};

export const createMockContentList = (count: number) => 
  Array.from({ length: count }, (_, i) => ({
    ...mockContent,
    id: String(i + 1),
    title: `Test Content ${i + 1}`
  }));
```

### API Mocking
```typescript
// test-utils/api-mocks.ts
import { vi } from 'vitest';

export const mockApiResponse = <T>(data: T, delay = 0) => {
  return vi.fn().mockImplementation(() => 
    new Promise(resolve => 
      setTimeout(() => resolve({
        ok: true,
        json: () => Promise.resolve({ data })
      }), delay)
    )
  );
};

export const mockApiError = (message: string, status = 500) => {
  return vi.fn().mockRejectedValue({
    status,
    message
  });
};
```

## Coverage Requirements

### Critical Components (100% Coverage Required)
- Authentication components (LoginForm, SignUpForm, AuthProvider)
- Base components (Button, Input, Card)
- Navigation components (MainNavigation, Sidebar)
- Form validation logic
- Error boundary components
- **AI-powered test components and utilities**

### Standard Components (80% Coverage Required)
- Content display components
- Layout components
- Utility components
- Store logic
- **AI testing helper functions**

### Coverage Exclusions
- Configuration files
- Type definitions
- Test setup files
- Third-party integrations (mocked)
- **AI test result analysis scripts (covered by E2E)**

## Enhanced Testing Commands

### Package.json Scripts with AI Testing
```json
{
  "scripts": {
    "test": "vitest",
    "test:watch": "vitest --watch",
    "test:coverage": "vitest --coverage",
    "test:ui": "vitest --ui",
    "test:e2e": "playwright test",
    "test:e2e:headed": "playwright test --headed",
    "test:ai": "playwright test tests/ai-powered-*.spec.ts",
    "test:ai:headed": "playwright test tests/ai-powered-*.spec.ts --headed",
    "test:a11y": "playwright test tests/accessibility.spec.ts",
    "test:bug-detection": "playwright test tests/ai-powered-visual.spec.ts --grep='AI Bug Detection'",
    "audit:a11y": "playwright test tests/accessibility.spec.ts --reporter=html",
    "analyze:ai": "node scripts/analyze-ai-test-results.js",
    "test:all": "npm run test:coverage && npm run test:e2e && npm run test:ai",
    "ci:test": "npm run test:coverage -- --reporter=json --reporter=html && npm run test:e2e && npm run test:ai"
  }
}
```

### AI Test Results Analysis
```javascript
// scripts/analyze-ai-test-results.js
const fs = require('fs');
const path = require('path');

function analyzeAITestResults() {
  const resultsDir = path.join(__dirname, '../test-results/ai-analysis');
  
  if (!fs.existsSync(resultsDir)) {
    console.log('No AI test results found');
    return;
  }
  
  const files = fs.readdirSync(resultsDir);
  const screenshots = files.filter(f => f.endsWith('.png'));
  const reports = files.filter(f => f.endsWith('.md'));
  
  console.log(`\n🤖 AI Testing Analysis Report`);
  console.log(`Screenshots captured: ${screenshots.length}`);
  console.log(`Bug reports generated: ${reports.length}`);
  
  if (reports.length > 0) {
    console.log(`\n📊 Latest AI Reports:`);
    reports.forEach(report => {
      console.log(`  - ${report}`);
    });
  }
  
  if (screenshots.length > 0) {
    console.log(`\n📷 Visual Evidence Captured:`);
    screenshots.forEach(screenshot => {
      console.log(`  - ${screenshot}`);
    });
  }
}

analyzeAITestResults();
```

## Unit Testing Standards

### Component Testing Template
```typescript
// Component.test.ts
import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';
import { render, screen, fireEvent, cleanup } from '@testing-library/svelte';
import userEvent from '@testing-library/user-event';
import Component from './Component.svelte';

describe('Component', () => {
  beforeEach(() => {
    // Setup before each test
  });

  afterEach(() => {
    cleanup();
    vi.clearAllMocks();
  });

  describe('Rendering', () => {
    it('renders with default props', () => {
      render(Component);
      expect(screen.getByRole('button')).toBeInTheDocument();
    });

    it('renders with custom props', () => {
      render(Component, {
        props: {
          variant: 'primary',
          size: 'lg',
          disabled: true
        }
      });
      
      const button = screen.getByRole('button');
      expect(button).toHaveClass('bg-primary-600');
      expect(button).toBeDisabled();
    });
  });

  describe('User Interactions', () => {
    it('handles click events', async () => {
      const user = userEvent.setup();
      const onClick = vi.fn();
      
      render(Component, { props: { onClick } });
      
      await user.click(screen.getByRole('button'));
      expect(onClick).toHaveBeenCalledOnce();
    });

    it('handles keyboard navigation', async () => {
      const user = userEvent.setup();
      const onClick = vi.fn();
      
      render(Component, { props: { onClick } });
      
      const button = screen.getByRole('button');
      button.focus();
      
      await user.keyboard('{Enter}');
      expect(onClick).toHaveBeenCalledOnce();
      
      await user.keyboard(' ');
      expect(onClick).toHaveBeenCalledTimes(2);
    });
  });

  describe('Accessibility', () => {
    it('has proper ARIA attributes', () => {
      render(Component, {
        props: {
          disabled: true,
          'aria-label': 'Submit form'
        }
      });
      
      const button = screen.getByRole('button');
      expect(button).toHaveAttribute('aria-disabled', 'true');
      expect(button).toHaveAttribute('aria-label', 'Submit form');
    });

    it('supports screen readers', () => {
      render(Component, { props: { children: 'Click me' } });
      
      const button = screen.getByRole('button', { name: 'Click me' });
      expect(button).toBeInTheDocument();
    });
  });

  describe('Error States', () => {
    it('handles invalid props gracefully', () => {
      // Test with invalid prop values
      expect(() => {
        render(Component, {
          props: { variant: 'invalid' as any }
        });
      }).not.toThrow();
    });
  });
});
```

## Coverage Requirements

### Critical Components (100% Coverage Required)
- Authentication components (LoginForm, SignUpForm, AuthProvider)
- Base components (Button, Input, Card)
- Navigation components (MainNavigation, Sidebar)
- Form validation logic
- Error boundary components
- **AI-powered test components and utilities**

### Standard Components (80% Coverage Required)
- Content display components
- Layout components
- Utility components
- Store logic
- **AI testing helper functions**

### Coverage Exclusions
- Configuration files
- Type definitions
- Test setup files
- Third-party integrations (mocked)
- **AI test result analysis scripts (covered by E2E)**

---

## See also
- [svelte_component_ui.mdc](mdc:ui/svelte_component_ui.mdc)
- [accessibility_ui.mdc](mdc:ui/accessibility_ui.mdc)
- [performance_ui.mdc](mdc:ui/performance_ui.mdc)
- [ui_development_workflow.mdc](mdc:ui/ui_development_workflow.mdc)

---

## Maintenance Notes
- **Update AI testing patterns when new MCP capabilities are available**
- **Review AI-generated bug reports weekly and incorporate findings**
- **Update test patterns when new component types are introduced**
- **Keep AI testing commands current with latest Playwright MCP features**
- **Monitor AI test performance and optimize as needed**



