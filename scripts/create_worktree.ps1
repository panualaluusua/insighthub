# Create a new git worktree in the 'worktrees' directory.
# Usage: ./scripts/create_worktree.ps1 -BranchName <branch-name> [-WorktreeName <worktree-name>]
[CmdletBinding()]
param (
    [Parameter(Mandatory=$true)]
    [string]$BranchName,

    [Parameter(Mandatory=$false)]
    [string]$WorktreeName = $BranchName
)

$worktreePath = "worktrees/$WorktreeName"
$baseBranch = "master"

Write-Host "Creating worktree for branch '$BranchName' at '$worktreePath'..."

# SAFETY CHECKS --------------------------------------------------------
# 1) Ensure clean working directory
$gitStatus = git status --porcelain
if ($gitStatus) {
    Write-Host "❌ Working tree not clean. Commit or stash your changes before creating a worktree." -ForegroundColor Red
    exit 1
}

# 2) Ensure current branch is master
$currentBranch = git rev-parse --abbrev-ref HEAD
if ($currentBranch -ne "master") {
    Write-Host "❌ You must run this script from the 'master' branch (current: $currentBranch)." -ForegroundColor Red
    exit 1
}

# 3) Ensure worktree path starts with 'worktrees/'
if (-not $worktreePath.StartsWith('worktrees/')) {
    Write-Host "❌ Worktree path must live under 'worktrees/'." -ForegroundColor Red
    exit 1
}
# ---------------------------------------------------------------------

# Add worktree if directory doesn't exist
if (-not (Test-Path $worktreePath)) {
    git worktree add -b "$BranchName" "$worktreePath" "$baseBranch"
    Write-Host "Worktree created successfully."
    Write-Host "To start working, run: cd $worktreePath"
} else {
    Write-Host "Error: Worktree directory '$worktreePath' already exists."
    exit 1
}

# Install pre-commit hook to enforce tm-test-guard
$hookFile = (git rev-parse --git-dir) + '/hooks/pre-commit'
if (-not (Get-Content $hookFile -ErrorAction SilentlyContinue | Select-String -Quiet 'tm-test-guard')) {
    Add-Content -Path $hookFile -Value "#!/usr/bin/env pwsh`n# Auto-generated by create_worktree.ps1 – enforce TDD guard`n& scripts/tm-test-guard.ps1; if ($LASTEXITCODE -ne 0) { exit 1 }"
    # Ensure executable permissions on *nix; PowerShell handles Windows automatically
    try { chmod +x $hookFile } catch {}
    Write-Host "Pre-commit hook installed (tm-test-guard)."
} 